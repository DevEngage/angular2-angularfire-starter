{
  "_args": [
    [
      {
        "name": "async-disk-cache",
        "raw": "async-disk-cache@https://registry.npmjs.org/async-disk-cache/-/async-disk-cache-1.0.7.tgz",
        "rawSpec": "https://registry.npmjs.org/async-disk-cache/-/async-disk-cache-1.0.7.tgz",
        "scope": null,
        "spec": "https://registry.npmjs.org/async-disk-cache/-/async-disk-cache-1.0.7.tgz",
        "type": "remote"
      },
      "/Users/th3brink/Sandbox/means-stack/node_modules/angular-cli/node_modules/ember-cli/node_modules/broccoli-babel-transpiler/node_modules/broccoli-persistent-filter"
    ]
  ],
  "_from": "async-disk-cache@>=1.0.0 <2.0.0",
  "_id": "async-disk-cache@1.0.7",
  "_inCache": true,
  "_location": "/angular-cli/ember-cli/broccoli-babel-transpiler/broccoli-persistent-filter/async-disk-cache",
  "_phantomChildren": {},
  "_requested": {
    "name": "async-disk-cache",
    "raw": "async-disk-cache@https://registry.npmjs.org/async-disk-cache/-/async-disk-cache-1.0.7.tgz",
    "rawSpec": "https://registry.npmjs.org/async-disk-cache/-/async-disk-cache-1.0.7.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/async-disk-cache/-/async-disk-cache-1.0.7.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/angular-cli/ember-cli/broccoli-babel-transpiler/broccoli-persistent-filter"
  ],
  "_resolved": "https://registry.npmjs.org/async-disk-cache/-/async-disk-cache-1.0.7.tgz",
  "_shasum": "c2cbd5745ce83747cae59e3633d5e6cf15db6aba",
  "_shrinkwrap": null,
  "_spec": "async-disk-cache@https://registry.npmjs.org/async-disk-cache/-/async-disk-cache-1.0.7.tgz",
  "_where": "/Users/th3brink/Sandbox/means-stack/node_modules/angular-cli/node_modules/ember-cli/node_modules/broccoli-babel-transpiler/node_modules/broccoli-persistent-filter",
  "author": {
    "email": "stefan.penner@gmail.com",
    "name": "Stefan Penner"
  },
  "bugs": {
    "url": "https://github.com/stefanpenner/async-disk-cache/issues"
  },
  "dependencies": {
    "debug": "^2.1.3",
    "istextorbinary": "2.1.0",
    "mkdirp": "^0.5.0",
    "rimraf": "^2.2.8",
    "rsvp": "^3.0.18"
  },
  "description": "Async disk cache",
  "devDependencies": {
    "chai": "^3.2.0",
    "istanbul": "^0.4.3",
    "mocha": "^2.5.3",
    "stat-mode": "^0.2.1"
  },
  "files": [
    "index.js",
    "lib/cache-entry.js"
  ],
  "homepage": "https://github.com/stefanpenner/async-disk-cache#readme",
  "jscsConfig": {
    "disallowMultipleVarDecl": true,
    "maximumLineLength": 80,
    "preset": "google",
    "requireBlocksOnNewline": true,
    "validateLineBreaks": "LF"
  },
  "keywords": [
    "cache",
    "temp",
    "file"
  ],
  "license": "MIT",
  "name": "async-disk-cache",
  "optionalDependencies": {},
  "readme": "# async-disk-cache [![Build status](https://ci.appveyor.com/api/projects/status/lfliompah66m611x?svg=true)](https://ci.appveyor.com/project/embercli/async-disk-cache) [![Build Status](https://travis-ci.org/stefanpenner/async-disk-cache.svg)](https://travis-ci.org/stefanpenner/async-disk-cache) \n\nAn aync disk cache. inspired by [jgable/cache-swap](https://github.com/jgable/cache-swap)\n\nA sync sibling version is also available: [stefanpenner/sync-disk-cache](https://github.com/stefanpenner/sync-disk-cache/)\n\n## Example\n\n```js\nvar Cache = require('async-disk-cache');\nvar cache = new Cache('my-cache');\n// 'my-cache' also serves as the global key for the cache.\n// if you have multiple programs with this same `cache-key` they will share the\n// same backing store. This by design.\n\n// checking\ncache.has('foo').then(function(wasFooFound) {\n\n});\n\n// retrieving (cache hit)\ncache.get('foo').then(function(cacheEntry) {\n  cacheEntry === {\n    isCached: true,\n    path: 'foo',\n    value: 'content of foo'\n  }\n});\n\n// retrieving (cache miss)\ncache.get('foo').then(function(cacheEntry) {\n  cacheEntry === {\n    isCached: false,\n    path: 'foo',\n    value: undefined\n  }\n});\n\n// retrieving (cache miss)\ncache.set('foo', 'content of foo').then(function() {\n  // was set\n});\n\n// clearing the cache\n\ncache.clear().then(function() {\n  // cache was cleared\n})\n```\n\n\nEnable compression:\n\n```js\nvar Cache = require('sync-disk-cache');\nvar cache = new Cache('my-cache', {\n  compression: 'gzip' | 'deflate' | 'deflateRaw', // basically just what nodes zlib's ships with\n  supportBuffer: 'true' | 'false' // add support for file caching (default `false`)\n})\n```\n\n## License\n\nLicensed under the MIT License, Copyright 2015 Stefan Penner\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stefanpenner/async-disk-cache.git"
  },
  "scripts": {
    "coverage": "istanbul cover _mocha",
    "test": "mocha test.js",
    "test:debug": "mocha debug test.js",
    "test:dot": "mocha test.js --reporter dot"
  },
  "version": "1.0.7"
}
